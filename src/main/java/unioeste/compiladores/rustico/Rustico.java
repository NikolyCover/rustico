/* Generated By:JavaCC: Do not edit this line. Rustico.java */
package unioeste.compiladores.rustico;

import unioeste.compiladores.symbols.TreeNode;
import unioeste.compiladores.utils.RusticoUtilities;

 public class Rustico implements RusticoConstants {

  final public void start(TreeNode parent) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_FALSE:
      case KW_FN:
      case KW_FOR:
      case KW_IF:
      case KW_LET:
      case KW_LOOP:
      case KW_MATCH:
      case KW_RETURN:
      case KW_TRUE:
      case KW_USE:
      case KW_WHILE:
      case STRING:
      case DIGIT:
      case DIGITS:
      case INTEGER:
      case REAL:
      case PLUS:
      case MINUS:
      case NOT:
      case LBRACE:
      case LPAREN:
      case LINE_COMMENT:
      case BLOCK_COMMENT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      statement(parent);
    }
  }

  final public void statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("statement");
    parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINE_COMMENT:
    case BLOCK_COMMENT:
      comment(node);
      break;
    case KW_USE:
      import_statement(node);
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2)) {
        variable_declaration(node);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KW_IF:
          conditional_statement(node);
          break;
        default:
          jj_la1[2] = jj_gen;
          if (jj_2_2(2)) {
            function_declaration(node);
          } else if (jj_2_3(2)) {
            assignment_statement(node);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case KW_WHILE:
              while_statement(node);
              break;
            case KW_FOR:
              for_statement(node);
              break;
            case KW_LOOP:
              loop_statement(node);
              break;
            case KW_MATCH:
              match_statement(node);
              break;
            case LBRACE:
              block(node);
              break;
            default:
              jj_la1[3] = jj_gen;
              if (jj_2_4(2)) {
                function_call_statement(node);
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case KW_RETURN:
                  function_return_statement(node);
                  break;
                default:
                  jj_la1[4] = jj_gen;
                  if (jj_2_5(2)) {
                    expression(node);
                  } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  final public void comment(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("comment");
    parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINE_COMMENT:
      jj_consume_token(LINE_COMMENT);
                        node.addChild(new TreeNode("LINE_COMMENT"));
      break;
    case BLOCK_COMMENT:
      jj_consume_token(BLOCK_COMMENT);
                         node.addChild(new TreeNode("BLOCK_COMMENT"));
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void variable_declaration(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("variable_declaration");
    parent.addChild(node);
    jj_consume_token(KW_LET);
                node.addChild(new TreeNode("KW_LET"));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_MUT:
      jj_consume_token(KW_MUT);
                 node.addChild(new TreeNode("KW_MUT"));
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
                    node.addChild(new TreeNode("IDENTIFIER"));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
                node.addChild(new TreeNode("COLON"));
      type_specifier(node);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
             node.addChild(new TreeNode("EQ"));
      expression(node);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
              node.addChild(new TreeNode("SEMI"));
  }

  final public void expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("expression");
    parent.addChild(node);
    logical_or_expression(node);
  }

  final public void import_statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("import_statement");
    parent.addChild(node);
    jj_consume_token(KW_USE);
                node.addChild(new TreeNode("KW_USE"));
    module_path(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_AS:
      jj_consume_token(KW_AS);
               node.addChild(new TreeNode("KW_AS"));
      jj_consume_token(IDENTIFIER);
                                                                      node.addChild(new TreeNode("IDENTIFIER"));
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
             node.addChild(new TreeNode("SEMI"));
  }

  final public void module_path(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("module_path");
    parent.addChild(node);
    jj_consume_token(IDENTIFIER);
                   node.addChild(new TreeNode("IDENTIFIER"));
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PATHSEP:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(PATHSEP);
                   node.addChild(new TreeNode("PATHSEP"));
      jj_consume_token(IDENTIFIER);
                                                                            node.addChild(new TreeNode("IDENTIFIER"));
    }
  }

  final public void assignment_statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("assignment_statement");
    parent.addChild(node);
    jj_consume_token(IDENTIFIER);
                   node.addChild(new TreeNode("IDENTIFIER"));
    assignment_operators(node);
    expression(node);
    jj_consume_token(SEMI);
             node.addChild(new TreeNode("SEMI"));
  }

  final public void assignment_operators(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("assignment_operators");
    parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
             node.addChild(new TreeNode("EQ"));
      break;
    case PLUSEQ:
      jj_consume_token(PLUSEQ);
                 node.addChild(new TreeNode("PLUSEQ"));
      break;
    case MINUSEQ:
      jj_consume_token(MINUSEQ);
                  node.addChild(new TreeNode("MINUSEQ"));
      break;
    case STAREQ:
      jj_consume_token(STAREQ);
                 node.addChild(new TreeNode("STAREQ"));
      break;
    case SLASHEQ:
      jj_consume_token(SLASHEQ);
                  node.addChild(new TreeNode("SLASHEQ"));
      break;
    case PERCENTEQ:
      jj_consume_token(PERCENTEQ);
                    node.addChild(new TreeNode("PERCENTEQ"));
      break;
    case CARETEQ:
      jj_consume_token(CARETEQ);
                  node.addChild(new TreeNode("CARETEQ"));
      break;
    case ANDEQ:
      jj_consume_token(ANDEQ);
                node.addChild(new TreeNode("ANDEQ"));
      break;
    case OREQ:
      jj_consume_token(OREQ);
               node.addChild(new TreeNode("OREQ"));
      break;
    case SHLEQ:
      jj_consume_token(SHLEQ);
                node.addChild(new TreeNode("SHLEQ"));
      break;
    case SHREQ:
      jj_consume_token(SHREQ);
                node.addChild(new TreeNode("SHREQ"));
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void logical_or_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("logical_or_expression");
    parent.addChild(node);
    logical_and_expression(node);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OROR:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      jj_consume_token(OROR);
      logical_and_expression(node);
    }
  }

  final public void logical_and_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("logical_and_expression");
    parent.addChild(node);
    equality_expression(node);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANDAND:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      jj_consume_token(ANDAND);
                 node.addChild(new TreeNode("ANDAND"));
      equality_expression(node);
    }
  }

  final public void equality_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("equality_expression");
    parent.addChild(node);
    relational_expression(node);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQEQ:
      case NE:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQEQ:
        jj_consume_token(EQEQ);
                   node.addChild(new TreeNode("EQEQ"));
        break;
      case NE:
        jj_consume_token(NE);
                                                                   node.addChild(new TreeNode("NE"));
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      relational_expression(node);
    }
  }

  final public void relational_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("relational_expression");
    parent.addChild(node);
    additive_expression(node);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case GE:
      case LE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
                     node.addChild(new TreeNode("LT"));
        break;
      case GT:
        jj_consume_token(GT);
                     node.addChild(new TreeNode("GT"));
        break;
      case LE:
        jj_consume_token(LE);
                     node.addChild(new TreeNode("LE"));
        break;
      case GE:
        jj_consume_token(GE);
                     node.addChild(new TreeNode("GE"));
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      additive_expression(node);
    }
  }

  final public void additive_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("additive_expression");
    parent.addChild(node);
    multiplicative_expression(node);
    label_7:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                   node.addChild(new TreeNode("PLUS"));
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                                      node.addChild(new TreeNode("MINUS"));
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      multiplicative_expression(node);
    }
  }

  final public void multiplicative_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("multiplicative_expression");
    parent.addChild(node);
    unary_expression(node);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case PERCENT:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                       node.addChild(new TreeNode("STAR"));
        break;
      case SLASH:
        jj_consume_token(SLASH);
                        node.addChild(new TreeNode("SLASH"));
        break;
      case PERCENT:
        jj_consume_token(PERCENT);
                          node.addChild(new TreeNode("PERCENT"));
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unary_expression(node);
    }
  }

  final public void unary_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("unary_expression");
    parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                   node.addChild(new TreeNode("PLUS"));
        break;
      case MINUS:
        jj_consume_token(MINUS);
                    node.addChild(new TreeNode("MINUS"));
        break;
      case NOT:
        jj_consume_token(NOT);
                  node.addChild(new TreeNode("NOT"));
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    primary_expression(node);
  }

  final public void primary_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("primary_expression");
    parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
                  node.addChild(new TreeNode("INTEGER"));
      break;
    case REAL:
      jj_consume_token(REAL);
               node.addChild(new TreeNode("REAL"));
      break;
    case DIGITS:
      jj_consume_token(DIGITS);
                 node.addChild(new TreeNode("DIGITS"));
      break;
    case DIGIT:
      jj_consume_token(DIGIT);
                node.addChild(new TreeNode("DIGIT"));
      break;
    case STRING:
      jj_consume_token(STRING);
                 node.addChild(new TreeNode("STRING"));
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                     node.addChild(new TreeNode("IDENTIFIER"));
      break;
    case KW_TRUE:
      jj_consume_token(KW_TRUE);
                  node.addChild(new TreeNode("KW_TRUE"));
      break;
    case KW_FALSE:
      jj_consume_token(KW_FALSE);
                   node.addChild(new TreeNode("KW_FALSE"));
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
                 node.addChild(new TreeNode("LPAREN"));
      expression(node);
      jj_consume_token(RPAREN);
                                                                                      node.addChild(new TreeNode("RPAREN"));
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void conditional_statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("conditional_statement");
    parent.addChild(node);
    jj_consume_token(KW_IF);
               node.addChild(new TreeNode("KW_IF"));
    conditional_expression(node);
    block(node);
    if (jj_2_7(2)) {
      jj_consume_token(KW_ELSE);
                                node.addChild(new TreeNode("KW_ELSE"));
      block(node);
    } else {
      ;
    }
  }

  final public void conditional_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("conditional_expression");
    parent.addChild(node);
    if (jj_2_8(2)) {
      jj_consume_token(LPAREN);
                 node.addChild(new TreeNode("LPAREN"));
      expression(node);
      jj_consume_token(RPAREN);
                                                                                      node.addChild(new TreeNode("RPAREN"));
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_FALSE:
      case KW_TRUE:
      case STRING:
      case DIGIT:
      case DIGITS:
      case INTEGER:
      case REAL:
      case PLUS:
      case MINUS:
      case NOT:
      case LPAREN:
      case IDENTIFIER:
        expression(node);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void block(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("block");
    parent.addChild(node);
    jj_consume_token(LBRACE);
               node.addChild(new TreeNode("LBRACE"));
    label_9:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_9;
      }
      statement(node);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
                     node.addChild(new TreeNode("RBRACE"));
      break;
    default:
      jj_la1[25] = jj_gen;
                Token currentToken = getToken(1); // Peek at the next token

                System.out.println(currentToken);
                if (currentToken.kind != RBRACE) {
                    {if (true) throw new ParseException(RusticoUtilities.getErrorMessage(currentToken, "Bloco n\u00e3o fechado!"));}
                }
    }
  }

  final public void while_statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("while_statement");
    parent.addChild(node);
    jj_consume_token(KW_WHILE);
                  node.addChild(new TreeNode("KW_WHILE"));
    jj_consume_token(LPAREN);
                node.addChild(new TreeNode("LPAREN"));
    expression(node);
    jj_consume_token(RPAREN);
                node.addChild(new TreeNode("RPAREN"));
    block(node);
  }

  final public void for_statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("for_statement");
    parent.addChild(node);
    jj_consume_token(KW_FOR);
                 node.addChild(new TreeNode("KW_FOR"));
    jj_consume_token(LPAREN);
                node.addChild(new TreeNode("LPAREN"));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_LET:
      variable_declaration(node);
      break;
    case IDENTIFIER:
      assignment_statement(node);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMI);
              node.addChild(new TreeNode("SEMI"));
    expression(node);
    jj_consume_token(SEMI);
              node.addChild(new TreeNode("SEMI"));
    expression(node);
    jj_consume_token(RPAREN);
                node.addChild(new TreeNode("RPAREN"));
    block(node);
  }

  final public void loop_statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("loop_statement");
    parent.addChild(node);
    jj_consume_token(KW_LOOP);
                 node.addChild(new TreeNode("KW_LOOP"));
    block(node);
  }

  final public void function_return_statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("function_return_statement");
    parent.addChild(node);
    jj_consume_token(KW_RETURN);
                  node.addChild(new TreeNode("KW_RETURN"));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_FALSE:
    case KW_TRUE:
    case STRING:
    case DIGIT:
    case DIGITS:
    case INTEGER:
    case REAL:
    case PLUS:
    case MINUS:
    case NOT:
    case LPAREN:
    case IDENTIFIER:
      expression(node);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
             node.addChild(new TreeNode("SEMI"));
  }

  final public void function_declaration(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("function_declaration");
    parent.addChild(node);
    jj_consume_token(KW_FN);
               node.addChild(new TreeNode("KW_FN"));
    jj_consume_token(IDENTIFIER);
                    node.addChild(new TreeNode("IDENTIFIER"));
    jj_consume_token(LPAREN);
                node.addChild(new TreeNode("LPAREN"));
    function_params(node);
    jj_consume_token(RPAREN);
                node.addChild(new TreeNode("RPAREN"));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RARROW:
      jj_consume_token(RARROW);
                 node.addChild(new TreeNode("RARROW"));
      type_specifier(node);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    block(node);
  }

  final public void function_params(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("function_params");
    parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      parameter(node);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
                                 node.addChild(new TreeNode("COMMA"));
        parameter(node);
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  final public void parameter(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("parameter");
    parent.addChild(node);
    jj_consume_token(IDENTIFIER);
                   node.addChild(new TreeNode("IDENTIFIER"));
    jj_consume_token(COLON);
              node.addChild(new TreeNode("COLON"));
    type_specifier(node);
  }

  final public void function_call_statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("function_call_statement");
    parent.addChild(node);
    jj_consume_token(IDENTIFIER);
                   node.addChild(new TreeNode("IDENTIFIER"));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
             node.addChild(new TreeNode("NOT"));
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
               node.addChild(new TreeNode("LPAREN"));
    function_arguments(node);
    jj_consume_token(RPAREN);
               node.addChild(new TreeNode("RPAREN"));
    jj_consume_token(SEMI);
             node.addChild(new TreeNode("SEMI"));
  }

  final public void function_arguments(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("function_arguments");
    parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_FALSE:
    case KW_TRUE:
    case STRING:
    case DIGIT:
    case DIGITS:
    case INTEGER:
    case REAL:
    case PLUS:
    case MINUS:
    case NOT:
    case LPAREN:
    case IDENTIFIER:
      expression(node);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
                                 node.addChild(new TreeNode("COMMA"));
        expression(node);
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  final public void match_statement(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("match_statement");
    parent.addChild(node);
    jj_consume_token(KW_MATCH);
                  node.addChild(new TreeNode("KW_MATCH"));
    match_expression(node);
    jj_consume_token(LBRACE);
                node.addChild(new TreeNode("LBRACE"));
    match_block(node);
    jj_consume_token(RBRACE);
                node.addChild(new TreeNode("RBRACE"));
  }

  final public void match_block(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("match_block");
    parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INTEGER:
    case UNDERSCORE:
    case IDENTIFIER:
      match_arm(node);
      label_12:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(COMMA);
                                node.addChild(new TreeNode("COMMA"));
        match_arm(node);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
                                                                                                     node.addChild(new TreeNode("COMMA"));
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
  }

  final public void match_arm(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("match_arm");
    parent.addChild(node);
    pattern(node);
    jj_consume_token(RARROW);
                             node.addChild(new TreeNode("RARROW"));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_FALSE:
    case KW_TRUE:
    case STRING:
    case DIGIT:
    case DIGITS:
    case INTEGER:
    case REAL:
    case PLUS:
    case MINUS:
    case NOT:
    case LPAREN:
    case IDENTIFIER:
      expression(node);
      break;
    case LBRACE:
      block(node);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void pattern(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("pattern");
    parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
                node.addChild(new TreeNode("INTEGER"));
      break;
    case STRING:
      jj_consume_token(STRING);
                 node.addChild(new TreeNode("STRING"));
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                     node.addChild(new TreeNode("IDENTIFIER"));
      break;
    case UNDERSCORE:
      jj_consume_token(UNDERSCORE);
            node.addChild(new TreeNode("_"));
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void match_expression(TreeNode parent) throws ParseException {
    TreeNode node = new TreeNode("match_expression");
    parent.addChild(node);
    if (jj_2_11(2)) {
      jj_consume_token(LPAREN);
               node.addChild(new TreeNode("LPAREN"));
      expression(node);
      jj_consume_token(RPAREN);
               node.addChild(new TreeNode("RPAREN"));
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_FALSE:
      case KW_TRUE:
      case STRING:
      case DIGIT:
      case DIGITS:
      case INTEGER:
      case REAL:
      case PLUS:
      case MINUS:
      case NOT:
      case LPAREN:
      case IDENTIFIER:
        expression(node);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void type_specifier(TreeNode parent) throws ParseException {
     TreeNode node = new TreeNode("type_specifier");
     parent.addChild(node);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TY_BOOL:
      jj_consume_token(TY_BOOL);
                node.addChild(new TreeNode("TY_BOOL"));
      break;
    case TY_CHAR:
      jj_consume_token(TY_CHAR);
                  node.addChild(new TreeNode("TY_CHAR"));
      break;
    case TY_STR:
      jj_consume_token(TY_STR);
                 node.addChild(new TreeNode("TY_STR"));
      break;
    case TY_U8:
      jj_consume_token(TY_U8);
                 node.addChild(new TreeNode("TY_U8"));
      break;
    case TY_U16:
      jj_consume_token(TY_U16);
                 node.addChild(new TreeNode("TY_U16"));
      break;
    case TY_U32:
      jj_consume_token(TY_U32);
                 node.addChild(new TreeNode("TY_U32"));
      break;
    case TY_U64:
      jj_consume_token(TY_U64);
                 node.addChild(new TreeNode("TY_U64"));
      break;
    case TY_U128:
      jj_consume_token(TY_U128);
                  node.addChild(new TreeNode("TY_U128"));
      break;
    case TY_USIZE:
      jj_consume_token(TY_USIZE);
                   node.addChild(new TreeNode("TY_USIZE"));
      break;
    case TY_I8:
      jj_consume_token(TY_I8);
                node.addChild(new TreeNode("TY_I8"));
      break;
    case TY_I16:
      jj_consume_token(TY_I16);
                 node.addChild(new TreeNode("TY_I16"));
      break;
    case TY_I32:
      jj_consume_token(TY_I32);
                 node.addChild(new TreeNode("TY_I32"));
      break;
    case TY_I64:
      jj_consume_token(TY_I64);
                 node.addChild(new TreeNode("TY_I64"));
      break;
    case TY_I128:
      jj_consume_token(TY_I128);
                  node.addChild(new TreeNode("TY_I128"));
      break;
    case TY_ISIZE:
      jj_consume_token(TY_ISIZE);
                   node.addChild(new TreeNode("TY_ISIZE"));
      break;
    case TY_F32:
      jj_consume_token(TY_F32);
                 node.addChild(new TreeNode("TY_F32"));
      break;
    case TY_F64:
      jj_consume_token(TY_F64);
                 node.addChild(new TreeNode("TY_F64"));
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                     node.addChild(new TreeNode("IDENTIFIER"));
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_3R_20() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(EQEQ)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(KW_FN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(ANDAND)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(KW_RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(OROR)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(KW_LOOP)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(SHREQ)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(SHLEQ)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(OREQ)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(ANDEQ)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(CARETEQ)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(PERCENTEQ)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(SLASHEQ)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(STAREQ)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(MINUSEQ)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(PLUSEQ)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(KW_FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(KW_WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(KW_USE)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(KW_ELSE)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(KW_MUT)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(KW_LET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(KW_IF)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(UNDERSCORE)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(BLOCK_COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(LINE_COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(KW_FALSE)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(KW_TRUE)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(DIGIT)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(DIGITS)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(PERCENT)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(KW_MATCH)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public RusticoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x839e000,0x0,0x10000,0x308000,0x8000000,0x0,0x1000000,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x80000,0x2000,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x2000,0x0,0x2000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7f0000a4,0x20,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x80000000,0x80000000,0x60000000,0x60000000,0x1f000004,0x7f000004,0x0,0x0,0x7f000004,0x0,0x0,0x0,0x0,0x0,0x7f000004,0x0,0x9000000,0x7f000004,0x9000000,0x7f000004,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x1ffc00,0x80,0x40,0x600000,0x600000,0x7800000,0x7800000,0x0,0x3,0x3,0x8,0x8,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x10000000,0x8,0x10000000,0x8,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x11000,0x0,0x0,0x1000,0x0,0x0,0x0,0x8,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x2000,0x0,0x10000,0x20,0x2,0x0,0x0,0x2,0x10000,0x2,0x0,0x11000,0x0,0x10000,0xfffc0000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x38,0x18,0x0,0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x20,0x20,0x0,0x0,0x20,0x0,0x0,0x20,0x0,0x20,0x20,0x20,0x20,0x27,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Rustico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Rustico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RusticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Rustico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RusticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Rustico(RusticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RusticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[138];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 138; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                       }
