/* Generated By:JavaCC: Do not edit this line. RusticoConstants.java */
package unioeste.compiladores.rustico;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RusticoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int KW_AS = 5;
  /** RegularExpression Id. */
  int KW_BREAK = 6;
  /** RegularExpression Id. */
  int KW_CONST = 7;
  /** RegularExpression Id. */
  int KW_CONTINUE = 8;
  /** RegularExpression Id. */
  int KW_CRATE = 9;
  /** RegularExpression Id. */
  int KW_ELSE = 10;
  /** RegularExpression Id. */
  int KW_ENUM = 11;
  /** RegularExpression Id. */
  int KW_EXTERN = 12;
  /** RegularExpression Id. */
  int KW_FALSE = 13;
  /** RegularExpression Id. */
  int KW_FN = 14;
  /** RegularExpression Id. */
  int KW_FOR = 15;
  /** RegularExpression Id. */
  int KW_IF = 16;
  /** RegularExpression Id. */
  int KW_IMPL = 17;
  /** RegularExpression Id. */
  int KW_IN = 18;
  /** RegularExpression Id. */
  int KW_LET = 19;
  /** RegularExpression Id. */
  int KW_LOOP = 20;
  /** RegularExpression Id. */
  int KW_MATCH = 21;
  /** RegularExpression Id. */
  int KW_MOD = 22;
  /** RegularExpression Id. */
  int KW_MOVE = 23;
  /** RegularExpression Id. */
  int KW_MUT = 24;
  /** RegularExpression Id. */
  int KW_PUB = 25;
  /** RegularExpression Id. */
  int KW_REF = 26;
  /** RegularExpression Id. */
  int KW_RETURN = 27;
  /** RegularExpression Id. */
  int KW_SELFVALUE = 28;
  /** RegularExpression Id. */
  int KW_SELFTYPE = 29;
  /** RegularExpression Id. */
  int KW_STATIC = 30;
  /** RegularExpression Id. */
  int KW_STRUCT = 31;
  /** RegularExpression Id. */
  int KW_SUPER = 32;
  /** RegularExpression Id. */
  int KW_TRAIT = 33;
  /** RegularExpression Id. */
  int KW_TRUE = 34;
  /** RegularExpression Id. */
  int KW_TYPE = 35;
  /** RegularExpression Id. */
  int KW_UNSAFE = 36;
  /** RegularExpression Id. */
  int KW_USE = 37;
  /** RegularExpression Id. */
  int KW_WHERE = 38;
  /** RegularExpression Id. */
  int KW_WHILE = 39;
  /** RegularExpression Id. */
  int KW_ASYNC = 40;
  /** RegularExpression Id. */
  int KW_AWAIT = 41;
  /** RegularExpression Id. */
  int KW_DYN = 42;
  /** RegularExpression Id. */
  int KW_ABSTRACT = 43;
  /** RegularExpression Id. */
  int KW_BECOME = 44;
  /** RegularExpression Id. */
  int KW_BOX = 45;
  /** RegularExpression Id. */
  int KW_DO = 46;
  /** RegularExpression Id. */
  int KW_FINAL = 47;
  /** RegularExpression Id. */
  int KW_MACRO = 48;
  /** RegularExpression Id. */
  int KW_OVERRIDE = 49;
  /** RegularExpression Id. */
  int KW_PRIV = 50;
  /** RegularExpression Id. */
  int KW_TYPEOF = 51;
  /** RegularExpression Id. */
  int KW_UNSIZED = 52;
  /** RegularExpression Id. */
  int KW_VIRTUAL = 53;
  /** RegularExpression Id. */
  int KW_YIELD = 54;
  /** RegularExpression Id. */
  int KW_TRY = 55;
  /** RegularExpression Id. */
  int CHAR = 56;
  /** RegularExpression Id. */
  int STRING = 57;
  /** RegularExpression Id. */
  int DIGIT = 58;
  /** RegularExpression Id. */
  int DIGITS = 59;
  /** RegularExpression Id. */
  int INTEGER = 60;
  /** RegularExpression Id. */
  int REAL = 61;
  /** RegularExpression Id. */
  int PLUS = 62;
  /** RegularExpression Id. */
  int MINUS = 63;
  /** RegularExpression Id. */
  int STAR = 64;
  /** RegularExpression Id. */
  int SLASH = 65;
  /** RegularExpression Id. */
  int PERCENT = 66;
  /** RegularExpression Id. */
  int CARET = 67;
  /** RegularExpression Id. */
  int NOT = 68;
  /** RegularExpression Id. */
  int AND = 69;
  /** RegularExpression Id. */
  int OR = 70;
  /** RegularExpression Id. */
  int ANDAND = 71;
  /** RegularExpression Id. */
  int OROR = 72;
  /** RegularExpression Id. */
  int SHL = 73;
  /** RegularExpression Id. */
  int SHR = 74;
  /** RegularExpression Id. */
  int PLUSEQ = 75;
  /** RegularExpression Id. */
  int MINUSEQ = 76;
  /** RegularExpression Id. */
  int STAREQ = 77;
  /** RegularExpression Id. */
  int SLASHEQ = 78;
  /** RegularExpression Id. */
  int PERCENTEQ = 79;
  /** RegularExpression Id. */
  int CARETEQ = 80;
  /** RegularExpression Id. */
  int ANDEQ = 81;
  /** RegularExpression Id. */
  int OREQ = 82;
  /** RegularExpression Id. */
  int SHLEQ = 83;
  /** RegularExpression Id. */
  int SHREQ = 84;
  /** RegularExpression Id. */
  int EQ = 85;
  /** RegularExpression Id. */
  int EQEQ = 86;
  /** RegularExpression Id. */
  int NE = 87;
  /** RegularExpression Id. */
  int GT = 88;
  /** RegularExpression Id. */
  int LT = 89;
  /** RegularExpression Id. */
  int GE = 90;
  /** RegularExpression Id. */
  int LE = 91;
  /** RegularExpression Id. */
  int AT = 92;
  /** RegularExpression Id. */
  int UNDERSCORE = 93;
  /** RegularExpression Id. */
  int DOT = 94;
  /** RegularExpression Id. */
  int DOTDOT = 95;
  /** RegularExpression Id. */
  int DOTDOTDOT = 96;
  /** RegularExpression Id. */
  int DOTDOTEQ = 97;
  /** RegularExpression Id. */
  int COMMA = 98;
  /** RegularExpression Id. */
  int SEMI = 99;
  /** RegularExpression Id. */
  int COLON = 100;
  /** RegularExpression Id. */
  int PATHSEP = 101;
  /** RegularExpression Id. */
  int RARROW = 102;
  /** RegularExpression Id. */
  int FATARROW = 103;
  /** RegularExpression Id. */
  int LARROW = 104;
  /** RegularExpression Id. */
  int POUND = 105;
  /** RegularExpression Id. */
  int DOLLAR = 106;
  /** RegularExpression Id. */
  int QUESTION = 107;
  /** RegularExpression Id. */
  int TILDE = 108;
  /** RegularExpression Id. */
  int LBRACE = 109;
  /** RegularExpression Id. */
  int RBRACE = 110;
  /** RegularExpression Id. */
  int LBRACKET = 111;
  /** RegularExpression Id. */
  int RBRACKET = 112;
  /** RegularExpression Id. */
  int LPAREN = 113;
  /** RegularExpression Id. */
  int RPAREN = 114;
  /** RegularExpression Id. */
  int TY_BOOL = 115;
  /** RegularExpression Id. */
  int TY_CHAR = 116;
  /** RegularExpression Id. */
  int TY_STR = 117;
  /** RegularExpression Id. */
  int TY_U8 = 118;
  /** RegularExpression Id. */
  int TY_U16 = 119;
  /** RegularExpression Id. */
  int TY_U32 = 120;
  /** RegularExpression Id. */
  int TY_U64 = 121;
  /** RegularExpression Id. */
  int TY_U128 = 122;
  /** RegularExpression Id. */
  int TY_USIZE = 123;
  /** RegularExpression Id. */
  int TY_I8 = 124;
  /** RegularExpression Id. */
  int TY_I16 = 125;
  /** RegularExpression Id. */
  int TY_I32 = 126;
  /** RegularExpression Id. */
  int TY_I64 = 127;
  /** RegularExpression Id. */
  int TY_I128 = 128;
  /** RegularExpression Id. */
  int TY_ISIZE = 129;
  /** RegularExpression Id. */
  int TY_F32 = 130;
  /** RegularExpression Id. */
  int TY_F64 = 131;
  /** RegularExpression Id. */
  int LINE_COMMENT = 132;
  /** RegularExpression Id. */
  int BLOCK_COMMENT = 133;
  /** RegularExpression Id. */
  int IDENTIFIER = 134;
  /** RegularExpression Id. */
  int IDENTIFIER_ERROR_START = 135;
  /** RegularExpression Id. */
  int REAL_NUMBER_ERROR_MALFORMED = 136;
  /** RegularExpression Id. */
  int STRING_ERROR_UNTERMINATED = 137;
  /** RegularExpression Id. */
  int PUNCTUATION_ERROR_INVALID = 138;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"as\"",
    "\"break\"",
    "\"const\"",
    "\"continue\"",
    "\"crate\"",
    "\"else\"",
    "\"enum\"",
    "\"extern\"",
    "\"false\"",
    "\"fn\"",
    "\"for\"",
    "\"if\"",
    "\"impl\"",
    "\"in\"",
    "\"let\"",
    "\"loop\"",
    "\"match\"",
    "\"mod\"",
    "\"move\"",
    "\"mut\"",
    "\"pub\"",
    "\"ref\"",
    "\"return\"",
    "\"self\"",
    "\"Self\"",
    "\"static\"",
    "\"struct\"",
    "\"super\"",
    "\"trait\"",
    "\"true\"",
    "\"type\"",
    "\"unsafe\"",
    "\"use\"",
    "\"where\"",
    "\"while\"",
    "\"async\"",
    "\"await\"",
    "\"dyn\"",
    "\"abstract\"",
    "\"become\"",
    "\"box\"",
    "\"do\"",
    "\"final\"",
    "\"macro\"",
    "\"override\"",
    "\"priv\"",
    "\"typeof\"",
    "\"unsized\"",
    "\"virtual\"",
    "\"yield\"",
    "\"try\"",
    "<CHAR>",
    "<STRING>",
    "<DIGIT>",
    "<DIGITS>",
    "<INTEGER>",
    "<REAL>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"&&\"",
    "\"||\"",
    "\"<<\"",
    "\">>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"^=\"",
    "\"&=\"",
    "\"|=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"@\"",
    "\"_\"",
    "\".\"",
    "\"..\"",
    "\"...\"",
    "\"..=\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"::\"",
    "\"->\"",
    "\"=>\"",
    "\"<-\"",
    "\"#\"",
    "\"$\"",
    "\"?\"",
    "\"~\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"bool\"",
    "\"char\"",
    "\"str\"",
    "\"u8\"",
    "\"u16\"",
    "\"u32\"",
    "\"u64\"",
    "\"u128\"",
    "\"usize\"",
    "\"i8\"",
    "\"i16\"",
    "\"i32\"",
    "\"i64\"",
    "\"i128\"",
    "\"isize\"",
    "\"f32\"",
    "\"f64\"",
    "<LINE_COMMENT>",
    "<BLOCK_COMMENT>",
    "<IDENTIFIER>",
    "<IDENTIFIER_ERROR_START>",
    "<REAL_NUMBER_ERROR_MALFORMED>",
    "<STRING_ERROR_UNTERMINATED>",
    "<PUNCTUATION_ERROR_INVALID>",
  };

}
