/* Generated By:JavaCC: Do not edit this line. Lexer.java */
package unioeste.compiladores.lex;

import java.io.InputStream;

 public class Lexer implements LexerConstants {

  final public void start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_FALSE:
      case KW_FN:
      case KW_FOR:
      case KW_IF:
      case KW_LET:
      case KW_LOOP:
      case KW_MATCH:
      case KW_RETURN:
      case KW_TRUE:
      case KW_USE:
      case KW_WHILE:
      case STRING:
      case DIGIT:
      case DIGITS:
      case INTEGER:
      case REAL:
      case PLUS:
      case MINUS:
      case NOT:
      case LBRACE:
      case LPAREN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      statement();
    }
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_USE:
      import_statement();
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2)) {
        variable_declaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KW_IF:
          conditional_statement();
          break;
        default:
          jj_la1[2] = jj_gen;
          if (jj_2_2(2)) {
            function_declaration();
          } else if (jj_2_3(2)) {
            assignment_statement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case KW_WHILE:
              while_statement();
              break;
            case KW_FOR:
              for_statement();
              break;
            case KW_LOOP:
              loop_statement();
              break;
            case KW_MATCH:
              match_statement();
              break;
            case LBRACE:
              block();
              break;
            case IDENTIFIER:
              function_call_statement();
              break;
            case KW_RETURN:
              function_return_statement();
              break;
            case KW_FALSE:
            case KW_TRUE:
            case STRING:
            case DIGIT:
            case DIGITS:
            case INTEGER:
            case REAL:
            case PLUS:
            case MINUS:
            case NOT:
            case LPAREN:
              expression();
              break;
            default:
              jj_la1[3] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void variable_declaration() throws ParseException {
    jj_consume_token(KW_LET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_MUT:
      jj_consume_token(KW_MUT);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      type_specifier();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      expression();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
  }

  final public void expression() throws ParseException {
    logical_or_expression();
  }

  final public void import_statement() throws ParseException {
    jj_consume_token(KW_USE);
    module_path();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_AS:
      jj_consume_token(KW_AS);
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
  }

  final public void module_path() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PATHSEP:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(PATHSEP);
      jj_consume_token(IDENTIFIER);
    }
  }

  final public void assignment_statement() throws ParseException {
    jj_consume_token(IDENTIFIER);
    assignment_operators();
    expression();
    jj_consume_token(SEMI);
  }

  final public void assignment_operators() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      break;
    case PLUSEQ:
      jj_consume_token(PLUSEQ);
      break;
    case MINUSEQ:
      jj_consume_token(MINUSEQ);
      break;
    case STAREQ:
      jj_consume_token(STAREQ);
      break;
    case SLASHEQ:
      jj_consume_token(SLASHEQ);
      break;
    case PERCENTEQ:
      jj_consume_token(PERCENTEQ);
      break;
    case CARETEQ:
      jj_consume_token(CARETEQ);
      break;
    case ANDEQ:
      jj_consume_token(ANDEQ);
      break;
    case OREQ:
      jj_consume_token(OREQ);
      break;
    case SHLEQ:
      jj_consume_token(SHLEQ);
      break;
    case SHREQ:
      jj_consume_token(SHREQ);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void logical_or_expression() throws ParseException {
    logical_and_expression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OROR:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(OROR);
      logical_and_expression();
    }
  }

  final public void logical_and_expression() throws ParseException {
    equality_expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANDAND:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      jj_consume_token(ANDAND);
      equality_expression();
    }
  }

  final public void equality_expression() throws ParseException {
    relational_expression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQEQ:
      case NE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQEQ:
        jj_consume_token(EQEQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      relational_expression();
    }
  }

  final public void relational_expression() throws ParseException {
    additive_expression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case GE:
      case LE:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      additive_expression();
    }
  }

  final public void additive_expression() throws ParseException {
    multiplicative_expression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      multiplicative_expression();
    }
  }

  final public void multiplicative_expression() throws ParseException {
    unary_expression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case PERCENT:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case PERCENT:
        jj_consume_token(PERCENT);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unary_expression();
    }
  }

  final public void unary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    primary_expression();
  }

  final public void primary_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case DIGITS:
      jj_consume_token(DIGITS);
      break;
    case DIGIT:
      jj_consume_token(DIGIT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case KW_TRUE:
      jj_consume_token(KW_TRUE);
      break;
    case KW_FALSE:
      jj_consume_token(KW_FALSE);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void conditional_statement() throws ParseException {
    jj_consume_token(KW_IF);
    conditional_expression();
    block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_ELSE:
      jj_consume_token(KW_ELSE);
      block();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void conditional_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
    case KW_FALSE:
    case KW_TRUE:
    case STRING:
    case DIGIT:
    case DIGITS:
    case INTEGER:
    case REAL:
    case PLUS:
    case MINUS:
    case NOT:
    case IDENTIFIER:
      expression();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void block() throws ParseException {
    jj_consume_token(LBRACE);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_FALSE:
      case KW_FN:
      case KW_FOR:
      case KW_IF:
      case KW_LET:
      case KW_LOOP:
      case KW_MATCH:
      case KW_RETURN:
      case KW_TRUE:
      case KW_USE:
      case KW_WHILE:
      case STRING:
      case DIGIT:
      case DIGITS:
      case INTEGER:
      case REAL:
      case PLUS:
      case MINUS:
      case NOT:
      case LBRACE:
      case LPAREN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
      statement();
    }
    jj_consume_token(RBRACE);
  }

  final public void while_statement() throws ParseException {
    jj_consume_token(KW_WHILE);
    jj_consume_token(LPAREN);
    expression();
    jj_consume_token(RPAREN);
    block();
  }

  final public void for_statement() throws ParseException {
    jj_consume_token(KW_FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_LET:
      variable_declaration();
      break;
    case IDENTIFIER:
      assignment_statement();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMI);
    expression();
    jj_consume_token(SEMI);
    expression();
    jj_consume_token(RPAREN);
    block();
  }

  final public void loop_statement() throws ParseException {
    jj_consume_token(KW_LOOP);
    block();
  }

  final public void function_return_statement() throws ParseException {
    jj_consume_token(KW_RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_FALSE:
    case KW_TRUE:
    case STRING:
    case DIGIT:
    case DIGITS:
    case INTEGER:
    case REAL:
    case PLUS:
    case MINUS:
    case NOT:
    case LPAREN:
    case IDENTIFIER:
      expression();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
  }

  final public void function_declaration() throws ParseException {
    jj_consume_token(KW_FN);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    function_params();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RARROW:
      jj_consume_token(RARROW);
      type_specifier();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    block();
  }

  final public void function_params() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      parameter();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        parameter();
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  final public void parameter() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type_specifier();
  }

  final public void function_call_statement() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    function_arguments();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMI);
  }

  final public void function_arguments() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_FALSE:
    case KW_TRUE:
    case STRING:
    case DIGIT:
    case DIGITS:
    case INTEGER:
    case REAL:
    case PLUS:
    case MINUS:
    case NOT:
    case LPAREN:
    case IDENTIFIER:
      expression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        expression();
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  final public void match_statement() throws ParseException {
    jj_consume_token(KW_MATCH);
    match_expression();
    jj_consume_token(LBRACE);
    match_block();
    jj_consume_token(RBRACE);
  }

  final public void match_block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INTEGER:
    case UNDERSCORE:
    case IDENTIFIER:
      match_arm();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        match_arm();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  final public void match_arm() throws ParseException {
    pattern();
    jj_consume_token(RARROW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_FALSE:
    case KW_TRUE:
    case STRING:
    case DIGIT:
    case DIGITS:
    case INTEGER:
    case REAL:
    case PLUS:
    case MINUS:
    case NOT:
    case LPAREN:
    case IDENTIFIER:
      expression();
      break;
    case LBRACE:
      block();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void pattern() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case UNDERSCORE:
      jj_consume_token(UNDERSCORE);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void match_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
    case KW_FALSE:
    case KW_TRUE:
    case STRING:
    case DIGIT:
    case DIGITS:
    case INTEGER:
    case REAL:
    case PLUS:
    case MINUS:
    case NOT:
    case IDENTIFIER:
      expression();
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void type_specifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TY_BOOL:
      jj_consume_token(TY_BOOL);
      break;
    case TY_CHAR:
      jj_consume_token(TY_CHAR);
      break;
    case TY_STR:
      jj_consume_token(TY_STR);
      break;
    case TY_U8:
      jj_consume_token(TY_U8);
      break;
    case TY_U16:
      jj_consume_token(TY_U16);
      break;
    case TY_U32:
      jj_consume_token(TY_U32);
      break;
    case TY_U64:
      jj_consume_token(TY_U64);
      break;
    case TY_U128:
      jj_consume_token(TY_U128);
      break;
    case TY_USIZE:
      jj_consume_token(TY_USIZE);
      break;
    case TY_I8:
      jj_consume_token(TY_I8);
      break;
    case TY_I16:
      jj_consume_token(TY_I16);
      break;
    case TY_I32:
      jj_consume_token(TY_I32);
      break;
    case TY_I64:
      jj_consume_token(TY_I64);
      break;
    case TY_I128:
      jj_consume_token(TY_I128);
      break;
    case TY_ISIZE:
      jj_consume_token(TY_ISIZE);
      break;
    case TY_F32:
      jj_consume_token(TY_F32);
      break;
    case TY_F64:
      jj_consume_token(TY_F64);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(KW_LET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(KW_FN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public LexerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x839e000,0x0,0x10000,0x830a000,0x1000000,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x400,0x2000,0x839e000,0x80000,0x2000,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x2000,0x0,0x2000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7f0000a4,0x20,0x0,0x7f000084,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x80000000,0x80000000,0x60000000,0x60000000,0x1f000004,0x0,0x7f000004,0x7f0000a4,0x0,0x7f000004,0x0,0x0,0x0,0x0,0x0,0x7f000004,0x0,0x0,0x9000000,0x7f000004,0x9000000,0x7f000004,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x8,0x0,0x0,0x8,0x0,0x0,0x100000,0x0,0x0,0x1ffc00,0x80,0x40,0x600000,0x600000,0x7800000,0x7800000,0x0,0x0,0x3,0x3,0x8,0x8,0x0,0x0,0x8,0x8,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x10000000,0x8,0x10000000,0x8,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x11000,0x0,0x0,0x11000,0x0,0x8,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x10000,0x11000,0x0,0x10000,0x20,0x2,0x0,0x0,0x2,0x10000,0x2,0x2,0x0,0x11000,0x0,0x10000,0xfffc0000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x20,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x20,0x20,0x20,0x0,0x0,0x20,0x0,0x0,0x20,0x0,0x0,0x20,0x20,0x20,0x20,0x27,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lexer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lexer(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[138];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 138; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                     }
