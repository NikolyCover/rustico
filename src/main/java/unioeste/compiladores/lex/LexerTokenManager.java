/* Generated By:JavaCC: Do not edit this line. LexerTokenManager.java */
package unioeste.compiladores.lex;
import java.io.InputStream;

/** Token Manager. */
public class LexerTokenManager implements LexerConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x10000006003L) != 0L)
            return 23;
         if ((active1 & 0x10008L) != 0L)
            return 4;
         if ((active0 & 0xffffffffffffe0L) != 0L)
         {
            jjmatchedKind = 59;
            return 1;
         }
         if ((active1 & 0xf00000000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0x410000054020L) != 0L)
            return 1;
         if ((active0 & 0xffbefffffabfc0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x80242007488000L) != 0L)
            return 1;
         if ((active0 & 0x7f9bdff8b23fc0L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0xc000c30920c00L) != 0L)
            return 1;
         if ((active0 & 0x739bd3c82033c0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 3;
            }
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x4183c3002022c0L) != 0L)
            return 1;
         if ((active0 & 0x3a1810c8001100L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x81010c8001000L) != 0L)
            return 1;
         if ((active0 & 0x32080000000100L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x30000000000000L) != 0L)
            return 1;
         if ((active0 & 0x2080000000100L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 35:
         return jjStopAtPos(0, 107);
      case 36:
         return jjStopAtPos(0, 108);
      case 37:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 38:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80200L);
      case 40:
         return jjStopAtPos(0, 115);
      case 41:
         return jjStopAtPos(0, 116);
      case 42:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 43:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 44:
         return jjStopAtPos(0, 100);
      case 45:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000004000L);
      case 46:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000000L);
      case 47:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 58:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
      case 59:
         return jjStopAtPos(0, 101);
      case 60:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40020200800L);
      case 61:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20001000000L);
      case 62:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10401000L);
      case 63:
         return jjStopAtPos(0, 109);
      case 64:
         return jjStopAtPos(0, 94);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 113);
      case 93:
         return jjStopAtPos(0, 114);
      case 94:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 95:
         return jjStopAtPos(0, 95);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xb0000000020L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x300000000040L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x380L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x440000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000000e000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x70000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x180000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000001e00000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4000002000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xc000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1d0000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x88000e00000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10003000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 111);
      case 124:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100400L);
      case 125:
         return jjStopAtPos(0, 112);
      case 126:
         return jjStopAtPos(0, 110);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 45:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 46:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00000000L);
      case 58:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 60:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 61:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 62:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000202000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10003c080000L, active1, 0L);
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x60800000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 1);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x10001000000800L, active1, 0L);
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000d08180L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000600000240L, active1, 0L);
      case 115:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x12000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x103000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x8040800000000L, active1, 0L);
      case 124:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 98);
         break;
      case 61:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(2, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(2, 86);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 99);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20240000200L, active1, 0L);
      case 98:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 1);
         break;
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 1);
         break;
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x42004000000040L, active1, 0L);
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x30002000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000180L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000900020000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000080000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10081000000400L, active1, 0L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 1);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x8201000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000800L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 120:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 1);
         break;
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x801000000040L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 1);
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000100001000L);
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10020200000000L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x40008000000000L);
      case 109:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 112:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x3004000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2080L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x20080040000300L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x88000000L);
      case 118:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 1);
         break;
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 1);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 1);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 1);
         break;
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 104:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000100L);
      case 107:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 1);
         break;
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 111:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2080008001000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 1);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20080000000000L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 1);
         break;
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 1);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 1);
         break;
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 2);
                  else if (curChar == 46)
                     jjCheckNAdd(3);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(20);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 10);
                  else if (curChar == 39)
                     jjCheckNAddStates(11, 14);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 117)
                     kind = 117;
                  break;
               case 7:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddStates(11, 14);
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 39 && kind > 56)
                     kind = 56;
                  break;
               case 11:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 58)
                     kind = 58;
                  break;
               case 13:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 10);
                  break;
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 34 && kind > 57)
                     kind = 57;
                  break;
               case 16:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 34 && kind > 58)
                     kind = 58;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(0, 3);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 2);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  jjAddStates(15, 16);
                  break;
               case 9:
                  jjAddStates(17, 18);
                  break;
               case 11:
                  jjAddStates(19, 20);
                  break;
               case 14:
                  jjAddStates(21, 22);
                  break;
               case 16:
                  jjAddStates(23, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(23, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   19, 20, 21, 2, 20, 21, 2, 14, 15, 16, 17, 9, 10, 11, 12, 5, 
   6, 9, 10, 11, 12, 14, 15, 16, 17, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\141\163", "\142\162\145\141\153", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\143\162\141\164\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\162\156", "\146\141\154\163\145", 
"\146\156", "\146\157\162", "\151\146", "\151\155\160\154", "\151\156", "\154\145\164", 
"\154\157\157\160", "\155\141\164\143\150", "\155\157\144", "\155\157\166\145", "\155\165\164", 
"\160\165\142", "\162\145\146", "\162\145\164\165\162\156", "\163\145\154\146", 
"\123\145\154\146", "\163\164\141\164\151\143", "\163\164\162\165\143\164", 
"\163\165\160\145\162", "\164\162\141\151\164", "\164\162\165\145", "\164\171\160\145", 
"\165\156\163\141\146\145", "\165\163\145", "\167\150\145\162\145", "\167\150\151\154\145", 
"\141\163\171\156\143", "\141\167\141\151\164", "\144\171\156", "\141\142\163\164\162\141\143\164", 
"\142\145\143\157\155\145", "\142\157\170", "\144\157", "\146\151\156\141\154", "\155\141\143\162\157", 
"\157\166\145\162\162\151\144\145", "\160\162\151\166", "\164\171\160\145\157\146", 
"\165\156\163\151\172\145\144", "\166\151\162\164\165\141\154", "\171\151\145\154\144", "\164\162\171", null, 
null, null, null, null, null, null, null, "\53", "\55", "\52", "\57", "\45", "\136", 
"\41", "\46", "\174", "\46\46", "\174\174", "\74\74", "\76\76", "\53\75", "\55\75", 
"\52\75", "\57\75", "\45\75", "\136\75", "\46\75", "\174\75", "\74\74\75", "\76\76\75", 
"\75", "\75\75", "\41\75", "\76", "\74", "\76\75", "\74\75", "\100", "\137", "\56", 
"\56\56", "\56\56\56", "\56\56\75", "\54", "\73", "\72", "\72\72", "\55\76", "\75\76", 
"\74\55", "\43", "\44", "\77", "\176", "\173", "\175", "\133", "\135", "\50", "\51", 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x3fffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[23];
static private final int[] jjstateSet = new int[46];
static protected char curChar;
/** Constructor. */
public LexerTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public LexerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
