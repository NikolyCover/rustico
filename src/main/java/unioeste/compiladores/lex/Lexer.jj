PARSER_BEGIN(Lexer)
package unioeste.compiladores.lex;

import java.io.InputStream;public class Lexer {}

PARSER_END(Lexer)

SKIP: {
    " " | "\t" | "\n" | "\r"
}

// keywords
TOKEN: {
           < KW_AS: "as" >
         | < KW_BREAK: "break" >
         | < KW_CONST: "const" >
         | < KW_CONTINUE: "continue" >
         | < KW_CRATE: "crate" >
         | < KW_ELSE: "else" >
         | < KW_ENUM: "enum" >
         | < KW_EXTERN: "extern" >
         | < KW_FALSE: "false" >
         | < KW_FN: "fn" >
         | < KW_FOR: "for" >
         | < KW_IF: "if" >
         | < KW_IMPL: "impl" >
         | < KW_IN: "in" >
         | < KW_LET: "let" >
         | < KW_LOOP: "loop" >
         | < KW_MATCH: "match" >
         | < KW_MOD: "mod" >
         | < KW_MOVE: "move" >
         | < KW_MUT: "mut" >
         | < KW_PUB: "pub" >
         | < KW_REF: "ref" >
         | < KW_RETURN: "return" >
         | < KW_SELFVALUE: "self" >
         | < KW_SELFTYPE: "Self" >
         | < KW_STATIC: "static" >
         | < KW_STRUCT: "struct" >
         | < KW_SUPER: "super" >
         | < KW_TRAIT: "trait" >
         | < KW_TRUE: "true" >
         | < KW_TYPE: "type" >
         | < KW_UNSAFE: "unsafe" >
         | < KW_USE: "use" >
         | < KW_WHERE: "where" >
         | < KW_WHILE: "while" >

         | < KW_ASYNC: "async" >
         | < KW_AWAIT: "await" >
         | < KW_DYN: "dyn" >

         |  < KW_ABSTRACT: "abstract" >
         | < KW_BECOME: "become" >
         | < KW_BOX: "box" >
         | < KW_DO: "do" >
         | < KW_FINAL: "final" >
         | < KW_MACRO: "macro" >
         | < KW_OVERRIDE: "override" >
         | < KW_PRIV: "priv" >
         | < KW_TYPEOF: "typeof" >
         | < KW_UNSIZED: "unsized" >
         | < KW_VIRTUAL: "virtual" >
         | < KW_YIELD: "yield" >

         | < KW_TRY: "try" >
}

// strings
TOKEN: {
    < STRING: "\'" (~["\'"])* "\'" | ("\"" (~["\""])* "\"") >
}

// numbers
TOKEN: {
      < DIGIT: ["0"-"9"] >
    | < DIGITS: (<DIGIT>)+ >
    | < INTEGER: ("-" | "+")? <DIGITS> >
    | < REAL: ("-" | "+")? (<DIGIT>)* "." <DIGITS> >
}

// punctuation
TOKEN : {
      < PLUS : "+" >
    | < MINUS : "-" >
    | < STAR : "*" >
    | < SLASH : "/" >
    | < PERCENT : "%" >
    | < CARET : "^" >
    | < NOT : "!" >
    | < AND : "&" >
    | < OR : "|" >
    | < ANDAND : "&&" >
    | < OROR : "||" >
    | < SHL : "<<" >
    | < SHR : ">>" >
    | < PLUSEQ : "+=" >
    | < MINUSEQ : "-=" >
    | < STAREQ : "*=" >
    | < SLASHEQ : "/=" >
    | < PERCENTEQ : "%=" >
    | < CARETEQ : "^=" >
    | < ANDEQ : "&=" >
    | < OREQ : "|=" >
    | < SHLEQ : "<<=" >
    | < SHREQ : ">>=" >
    | < EQ : "=" >
    | < EQEQ : "==" >
    | < NE : "!=" >
    | < GT : ">" >
    | < LT : "<" >
    | < GE : ">=" >
    | < LE : "<=" >
    | < AT : "@" >
    | < UNDERSCORE : "_" >
    | < DOT : "." >
    | < DOTDOT : ".." >
    | < DOTDOTDOT : "..." >
    | < DOTDOTEQ : "..=" >
    | < COMMA : "," >
    | < SEMI : ";" >
    | < COLON : ":" >
    | < PATHSEP : "::" >
    | < RARROW : "->" >
    | < FATARROW : "=>" >
    | < LARROW : "<-" >
    | < POUND : "#" >
    | < DOLLAR : "$" >
    | < QUESTION : "?" >
    | < TILDE : "~" >
}

// delimiters
TOKEN: {
      < LBRACE: "{" >
    | < RBRACE: "}" >
    | < LBRACKET: "[" >
    | < RBRACKET: "]" >
    | < LPAREN: "(" >
    | < RPAREN: ")" >
}

// comments
TOKEN: {
      < LINE_COMMENT: "//" (~["\n", "\r"])* ["\n", "\r"] >
    | < BLOCK_COMMENTS: "/*" ("[^*]" | ("\\*[^/]" | "\\*[\\r\\n]*"))* "*/" >
}

// identifiers
TOKEN : {
    < IDENTIFIER: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
}

// errors
TOKEN : {
      < IDENTIFIER_ERROR_START: (~["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
    | < REAL_NUMBER_ERROR_MALFORMED: ("-" | "+")? (<DIGIT>)* "." <DIGITS> "." <DIGITS> >
    | < STRING_ERROR_UNTERMINATED: ("\"" (~["\""])* ) | ("\'" (~["\'"])* ) >
    | < PUNCTUATION_ERROR_INVALID: ("++" | "--" ) >
}