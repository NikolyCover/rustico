options {
    STATIC = false;
}

PARSER_BEGIN(Lexer)
package unioeste.compiladores.lex;

import java.io.InputStream;
import unioeste.compiladores.symbols.TreeNode;

 public class Lexer {}

PARSER_END(Lexer)

SKIP: {
    " " | "\t" | "\n" | "\r"
}

// keywords
TOKEN: {
           < KW_AS: "as" >
         | < KW_BREAK: "break" >
         | < KW_CONST: "const" >
         | < KW_CONTINUE: "continue" >
         | < KW_CRATE: "crate" >
         | < KW_ELSE: "else" >
         | < KW_ENUM: "enum" >
         | < KW_EXTERN: "extern" >
         | < KW_FALSE: "false" >
         | < KW_FN: "fn" >
         | < KW_FOR: "for" >
         | < KW_IF: "if" >
         | < KW_IMPL: "impl" >
         | < KW_IN: "in" >
         | < KW_LET: "let" >
         | < KW_LOOP: "loop" >
         | < KW_MATCH: "match" >
         | < KW_MOD: "mod" >
         | < KW_MOVE: "move" >
         | < KW_MUT: "mut" >
         | < KW_PUB: "pub" >
         | < KW_REF: "ref" >
         | < KW_RETURN: "return" >
         | < KW_SELFVALUE: "self" >
         | < KW_SELFTYPE: "Self" >
         | < KW_STATIC: "static" >
         | < KW_STRUCT: "struct" >
         | < KW_SUPER: "super" >
         | < KW_TRAIT: "trait" >
         | < KW_TRUE: "true" >
         | < KW_TYPE: "type" >
         | < KW_UNSAFE: "unsafe" >
         | < KW_USE: "use" >
         | < KW_WHERE: "where" >
         | < KW_WHILE: "while" >

         | < KW_ASYNC: "async" >
         | < KW_AWAIT: "await" >
         | < KW_DYN: "dyn" >

         |  < KW_ABSTRACT: "abstract" >
         | < KW_BECOME: "become" >
         | < KW_BOX: "box" >
         | < KW_DO: "do" >
         | < KW_FINAL: "final" >
         | < KW_MACRO: "macro" >
         | < KW_OVERRIDE: "override" >
         | < KW_PRIV: "priv" >
         | < KW_TYPEOF: "typeof" >
         | < KW_UNSIZED: "unsized" >
         | < KW_VIRTUAL: "virtual" >
         | < KW_YIELD: "yield" >

         | < KW_TRY: "try" >
}

// strings
TOKEN: {
    < STRING: "\'" (~["\'"])* "\'" | ("\"" (~["\""])* "\"") >
}

// numbers
TOKEN: {
      < DIGIT: ["0"-"9"] >
    | < DIGITS: (<DIGIT>)+ >
    | < INTEGER: ("-" | "+")? <DIGITS> >
    | < REAL: ("-" | "+")? (<DIGIT>)* "." <DIGITS> >
}

// punctuation
TOKEN : {
      < PLUS : "+" >
    | < MINUS : "-" >
    | < STAR : "*" >
    | < SLASH : "/" >
    | < PERCENT : "%" >
    | < CARET : "^" >
    | < NOT : "!" >
    | < AND : "&" >
    | < OR : "|" >
    | < ANDAND : "&&" >
    | < OROR : "||" >
    | < SHL : "<<" >
    | < SHR : ">>" >
    | < PLUSEQ : "+=" >
    | < MINUSEQ : "-=" >
    | < STAREQ : "*=" >
    | < SLASHEQ : "/=" >
    | < PERCENTEQ : "%=" >
    | < CARETEQ : "^=" >
    | < ANDEQ : "&=" >
    | < OREQ : "|=" >
    | < SHLEQ : "<<=" >
    | < SHREQ : ">>=" >
    | < EQ : "=" >
    | < EQEQ : "==" >
    | < NE : "!=" >
    | < GT : ">" >
    | < LT : "<" >
    | < GE : ">=" >
    | < LE : "<=" >
    | < AT : "@" >
    | < UNDERSCORE : "_" >
    | < DOT : "." >
    | < DOTDOT : ".." >
    | < DOTDOTDOT : "..." >
    | < DOTDOTEQ : "..=" >
    | < COMMA : "," >
    | < SEMI : ";" >
    | < COLON : ":" >
    | < PATHSEP : "::" >
    | < RARROW : "->" >
    | < FATARROW : "=>" >
    | < LARROW : "<-" >
    | < POUND : "#" >
    | < DOLLAR : "$" >
    | < QUESTION : "?" >
    | < TILDE : "~" >
}

// delimiters
TOKEN: {
      < LBRACE: "{" >
    | < RBRACE: "}" >
    | < LBRACKET: "[" >
    | < RBRACKET: "]" >
    | < LPAREN: "(" >
    | < RPAREN: ")" >
}

// built in types
TOKEN: {
    < TY_BOOL: "bool" >
  | < TY_CHAR: "char" >
  | < TY_STR: "str" >
  | < TY_U8: "u8" >
  | < TY_U16: "u16" >
  | < TY_U32: "u32" >
  | < TY_U64: "u64" >
  | < TY_U128: "u128" >
  | < TY_USIZE: "usize" >
  | < TY_I8: "i8" >
  | < TY_I16: "i16" >
  | < TY_I32: "i32" >
  | < TY_I64: "i64" >
  | < TY_I128: "i128" >
  | < TY_ISIZE: "isize" >
  | < TY_F32: "f32" >
  | < TY_F64: "f64" >
}

// comments
TOKEN: {
      < LINE_COMMENT: "//" (~["\n", "\r"])* ["\n", "\r"] >
     | < BLOCK_COMMENTS: "/*" (("*")* (~["/"])* | (~["*"])* ("/")*)* "*/" >
}

// identifiers
TOKEN : {
    < IDENTIFIER: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])*  >
}

// errors
TOKEN : {
      < IDENTIFIER_ERROR_START: <AT> (["a"-"z", "A"-"Z", "0"-"9", "_"])*  | <DIGIT> (["a"-"z", "A"-"Z", "0"-"9", "_"])*  | <UNDERSCORE> >
    | < REAL_NUMBER_ERROR_MALFORMED: ("-" | "+")? (<DIGIT>)* "." <DIGITS> "." <DIGITS> >
    | < STRING_ERROR_UNTERMINATED: ("\"" (~["\""])* ) | ("\'" (~["\'"])* ) >
    | < PUNCTUATION_ERROR_INVALID: (("+") ("+")+ | ("-") ("-")+ ) >
}

void start(TreeNode parent): {}
{
    ( statement(parent))*
}

void statement(TreeNode parent):
{
    TreeNode node = new TreeNode("statement");
    parent.addChild(node);
}
{
     import_statement(node)
    | LOOKAHEAD(2) variable_declaration(node)
    | conditional_statement(node)
    | LOOKAHEAD(2) function_declaration(node)
    | LOOKAHEAD(2) assignment_statement(node)
    | while_statement(node)
    | for_statement(node)
    | loop_statement(node)
    | match_statement(node)
    | block(node)
    | LOOKAHEAD(2) function_call_statement(node)
    | function_return_statement(node)
    | LOOKAHEAD(2) expression(node)
}

void variable_declaration(TreeNode parent):
{
    TreeNode node = new TreeNode("variable_declaration");
    parent.addChild(node);
}
{
    <KW_LET> {  node.addChild(new TreeNode("KW_LET")); }
    (<KW_MUT> {  node.addChild(new TreeNode("KW_MUT")); })?
    <IDENTIFIER> {  node.addChild(new TreeNode("IDENTIFIER")); }
    (<COLON> {  node.addChild(new TreeNode("COLON")); } type_specifier(node))?
    (<EQ> {  node.addChild(new TreeNode("EQ")); } expression(node))?
    <SEMI> {  node.addChild(new TreeNode("SEMI")); }
}

void expression(TreeNode parent):
{
    TreeNode node = new TreeNode("expression");
    parent.addChild(node);
}
{
    logical_or_expression(node)
}

void import_statement(TreeNode parent):
{
    TreeNode node = new TreeNode("import_statement");
    parent.addChild(node);
}
{
    <KW_USE> {  node.addChild(new TreeNode("KW_USE")); }
    module_path(node)
    (<KW_AS> { node.addChild(new TreeNode("KW_AS")); } <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); })?
    <SEMI> { node.addChild(new TreeNode("SEMI")); }
}

void module_path(TreeNode parent):
{
    TreeNode node = new TreeNode("module_path");
    parent.addChild(node);
}
{
    <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); }
     ( <PATHSEP> { node.addChild(new TreeNode("PATHSEP")); } <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); } )*
}

void assignment_statement(TreeNode parent):
{
    TreeNode node = new TreeNode("assignment_statement");
    parent.addChild(node);
}
{
    <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); }
    assignment_operators(node)
    expression(node)
    <SEMI> { node.addChild(new TreeNode("SEMI")); }
}

void assignment_operators(TreeNode parent):
{
    TreeNode node = new TreeNode("assignment_operators");
    parent.addChild(node);
}
{
      <EQ> { node.addChild(new TreeNode("EQ")); }
    | <PLUSEQ> { node.addChild(new TreeNode("PLUSEQ")); }
    | <MINUSEQ> { node.addChild(new TreeNode("MINUSEQ")); }
    | <STAREQ> { node.addChild(new TreeNode("STAREQ")); }
    | <SLASHEQ> { node.addChild(new TreeNode("SLASHEQ")); }
    | <PERCENTEQ> { node.addChild(new TreeNode("PERCENTEQ")); }
    | <CARETEQ> { node.addChild(new TreeNode("CARETEQ")); }
    | <ANDEQ> { node.addChild(new TreeNode("ANDEQ")); }
    | <OREQ> { node.addChild(new TreeNode("OREQ")); }
    | <SHLEQ> { node.addChild(new TreeNode("SHLEQ")); }
    | <SHREQ> { node.addChild(new TreeNode("SHREQ")); }
}

void logical_or_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("logical_or_expression");
    parent.addChild(node);
}
{
     logical_and_expression(node)
     ( <OROR>   logical_and_expression(node))*
}

void logical_and_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("logical_and_expression");
    parent.addChild(node);
}
{
    equality_expression(node)
    ( <ANDAND> { node.addChild(new TreeNode("ANDAND")); } equality_expression(node) )*
}

void equality_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("equality_expression");
    parent.addChild(node);
}
{
    relational_expression(node)
    (
        ( <EQEQ> { node.addChild(new TreeNode("EQEQ")); } | <NE> { node.addChild(new TreeNode("NE")); } )
        relational_expression(node)
    )*
}

void relational_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("relational_expression");
    parent.addChild(node);
}
{
    additive_expression(node)
    (
        (
              <LT> { node.addChild(new TreeNode("LT")); }
            | <GT> { node.addChild(new TreeNode("GT")); }
            | <LE> { node.addChild(new TreeNode("LE")); }
            | <GE> { node.addChild(new TreeNode("GE")); }
        )
        additive_expression(node)
    )*
}

void additive_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("additive_expression");
    parent.addChild(node);
}
{
    multiplicative_expression(node)
    (
        LOOKAHEAD(2)
        ( <PLUS> { node.addChild(new TreeNode("PLUS")); } | <MINUS> { node.addChild(new TreeNode("MINUS")); } )
        multiplicative_expression(node)
    )*
}

void multiplicative_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("multiplicative_expression");
    parent.addChild(node);
}
{
    unary_expression(node)
    (
        (
              <STAR> { node.addChild(new TreeNode("STAR")); }
            | <SLASH> { node.addChild(new TreeNode("SLASH")); }
            | <PERCENT> { node.addChild(new TreeNode("PERCENT")); }
        )
        unary_expression(node)
    )*
}

void unary_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("unary_expression");
    parent.addChild(node);
}
{
    (
          <PLUS> { node.addChild(new TreeNode("PLUS")); }
        | <MINUS> { node.addChild(new TreeNode("MINUS")); }
        | <NOT> { node.addChild(new TreeNode("NOT")); }
    )?
    primary_expression(node)
}

void primary_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("primary_expression");
    parent.addChild(node);
}
{
      <INTEGER> { node.addChild(new TreeNode("INTEGER")); }
    | <REAL> { node.addChild(new TreeNode("REAL")); }
    | <DIGITS> { node.addChild(new TreeNode("DIGITS")); }
    | <DIGIT> { node.addChild(new TreeNode("DIGIT")); }
    | <STRING> { node.addChild(new TreeNode("STRING")); }
    | <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); }
    | <KW_TRUE> { node.addChild(new TreeNode("KW_TRUE")); }
    | <KW_FALSE> { node.addChild(new TreeNode("KW_FALSE")); }
    | "(" expression(node) ")"
}

void conditional_statement(TreeNode parent):
{
    TreeNode node = new TreeNode("conditional_statement");
    parent.addChild(node);
}
{
     <KW_IF> { node.addChild(new TreeNode("KW_IF")); }
     conditional_expression(node)
     block(node)
     (<KW_ELSE> { node.addChild(new TreeNode("KW_ELSE")); } block(node))?
}

void conditional_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("conditional_expression");
    parent.addChild(node);
}
{
    LOOKAHEAD(2)
      <LPAREN> { node.addChild(new TreeNode("LPAREN")); } expression(node) <RPAREN> { node.addChild(new TreeNode("RPAREN")); }
    | expression(node)
}

void block(TreeNode parent):
{
    TreeNode node = new TreeNode("block");
    parent.addChild(node);
}
{
    <LBRACE> { node.addChild(new TreeNode("LBRACE")); }
    ( statement(node))*
    <RBRACE> { node.addChild(new TreeNode("RBRACE")); }
}

void while_statement(TreeNode parent):
{
    TreeNode node = new TreeNode("while_statement");
    parent.addChild(node);
}
{
     <KW_WHILE> { node.addChild(new TreeNode("KW_WHILE")); }
     <LPAREN> { node.addChild(new TreeNode("LPAREN")); }
     expression(node)
     <RPAREN> { node.addChild(new TreeNode("RPAREN")); }
     block(node)
}

void for_statement(TreeNode parent):
{
    TreeNode node = new TreeNode("for_statement");
    parent.addChild(node);
}
{
     <KW_FOR>  { node.addChild(new TreeNode("KW_FOR")); }
     <LPAREN> { node.addChild(new TreeNode("LPAREN")); }
     (variable_declaration(node) | assignment_statement(node))
     <SEMI> { node.addChild(new TreeNode("SEMI")); }
     expression(node)
     <SEMI> { node.addChild(new TreeNode("SEMI")); }
     expression(node)
     <RPAREN> { node.addChild(new TreeNode("RPAREN")); }
     block(node)
}

void loop_statement(TreeNode parent):
{
    TreeNode node = new TreeNode("loop_statement");
    parent.addChild(node);
}
{
     <KW_LOOP> { node.addChild(new TreeNode("KW_LOOP")); } block(node)
}

void function_return_statement(TreeNode parent):
{
    TreeNode node = new TreeNode("function_return_statement");
    parent.addChild(node);
}
{
    <KW_RETURN> { node.addChild(new TreeNode("KW_RETURN")); }
    (expression(node))?
    <SEMI> { node.addChild(new TreeNode("SEMI")); }
}

void function_declaration(TreeNode parent):
{
    TreeNode node = new TreeNode("function_declaration");
    parent.addChild(node);
}
{
     <KW_FN> { node.addChild(new TreeNode("KW_FN")); }
     <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); }
     <LPAREN> { node.addChild(new TreeNode("LPAREN")); }
     function_params(node)
     <RPAREN> { node.addChild(new TreeNode("RPAREN")); }
     (<RARROW> { node.addChild(new TreeNode("RARROW")); } type_specifier(node))?
     block(node)
}

void function_params(TreeNode parent):
{
    TreeNode node = new TreeNode("function_params");
    parent.addChild(node);
}
{
    (parameter(node) ( <COMMA> { node.addChild(new TreeNode("COMMA")); } parameter(node) )* )?
}

void parameter(TreeNode parent):
{
    TreeNode node = new TreeNode("parameter");
    parent.addChild(node);
}
{
    <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); }
    <COLON> { node.addChild(new TreeNode("COLON")); }
    type_specifier(node)
}

void function_call_statement(TreeNode parent):
{
    TreeNode node = new TreeNode("function_call_statement");
    parent.addChild(node);
}
{
    <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); }
    (<NOT> { node.addChild(new TreeNode("NOT")); } )?
    <LPAREN> { node.addChild(new TreeNode("LPAREN")); }
    function_arguments(node)
    <RPAREN> { node.addChild(new TreeNode("RPAREN")); }
    <SEMI> { node.addChild(new TreeNode("SEMI")); }
}

void function_arguments(TreeNode parent):
{
    TreeNode node = new TreeNode("function_arguments");
    parent.addChild(node);
}
{
    (expression(node) (<COMMA> { node.addChild(new TreeNode("COMMA")); } expression(node))*)?
}

void match_statement(TreeNode parent):
{
    TreeNode node = new TreeNode("match_statement");
    parent.addChild(node);
}
{
     <KW_MATCH> { node.addChild(new TreeNode("KW_MATCH")); }
     match_expression(node)
     <LBRACE> { node.addChild(new TreeNode("LBRACE")); }
     match_block(node)
     <RBRACE> { node.addChild(new TreeNode("RBRACE")); }
}

void match_block(TreeNode parent):
{
    TreeNode node = new TreeNode("match_block");
    parent.addChild(node);
}
{
    (
        match_arm(node)
        (LOOKAHEAD(2) "," { node.addChild(new TreeNode(",")); } match_arm(node))* ("," { node.addChild(new TreeNode(",")); })?
    )?
}

void match_arm(TreeNode parent):
{
    TreeNode node = new TreeNode("match_arm");
    parent.addChild(node);
}
{
    pattern(node) <RARROW> { node.addChild(new TreeNode("RARROW")); } (expression(node) | block(node))
}

void pattern(TreeNode parent):
{
    TreeNode node = new TreeNode("pattern");
    parent.addChild(node);
}
{
    <INTEGER> { node.addChild(new TreeNode("INTEGER")); }
    | <STRING> { node.addChild(new TreeNode("STRING")); }
    | <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); }
    | "_" { node.addChild(new TreeNode("_")); }
}

void match_expression(TreeNode parent):
{
    TreeNode node = new TreeNode("match_expression");
    parent.addChild(node);
}
{
    LOOKAHEAD(2)
    <LPAREN> { node.addChild(new TreeNode("LPAREN")); }
    expression(node)
    <RPAREN> { node.addChild(new TreeNode("RPAREN")); }
    | expression(node)
}

void type_specifier(TreeNode parent):
{
     TreeNode node = new TreeNode("type_specifier");
     parent.addChild(node);
}
{
    <TY_BOOL> { node.addChild(new TreeNode("TY_BOOL")); }
    | <TY_CHAR> { node.addChild(new TreeNode("TY_CHAR")); }
    | <TY_STR> { node.addChild(new TreeNode("TY_STR")); }
    | <TY_U8>  { node.addChild(new TreeNode("TY_U8")); }
    | <TY_U16> { node.addChild(new TreeNode("TY_U16")); }
    | <TY_U32> { node.addChild(new TreeNode("TY_U32")); }
    | <TY_U64> { node.addChild(new TreeNode("TY_U64")); }
    | <TY_U128> { node.addChild(new TreeNode("TY_U128")); }
    | <TY_USIZE> { node.addChild(new TreeNode("TY_USIZE")); }
    | <TY_I8> { node.addChild(new TreeNode("TY_I8")); }
    | <TY_I16> { node.addChild(new TreeNode("TY_I16")); }
    | <TY_I32> { node.addChild(new TreeNode("TY_I32")); }
    | <TY_I64> { node.addChild(new TreeNode("TY_I64")); }
    | <TY_I128> { node.addChild(new TreeNode("TY_I128")); }
    | <TY_ISIZE> { node.addChild(new TreeNode("TY_ISIZE")); }
    | <TY_F32> { node.addChild(new TreeNode("TY_F32")); }
    | <TY_F64> { node.addChild(new TreeNode("TY_F64")); }
    | <IDENTIFIER> { node.addChild(new TreeNode("IDENTIFIER")); }
}
