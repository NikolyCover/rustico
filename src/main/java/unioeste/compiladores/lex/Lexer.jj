options {
    STATIC = false;
}

PARSER_BEGIN(Lexer)
package unioeste.compiladores.lex;

import java.io.InputStream;
import unioeste.compiladores.symbols.TreeNode;

 public class Lexer {}

PARSER_END(Lexer)

SKIP: {
    " " | "\t" | "\n" | "\r"
}

// keywords
TOKEN: {
           < KW_AS: "as" >
         | < KW_BREAK: "break" >
         | < KW_CONST: "const" >
         | < KW_CONTINUE: "continue" >
         | < KW_CRATE: "crate" >
         | < KW_ELSE: "else" >
         | < KW_ENUM: "enum" >
         | < KW_EXTERN: "extern" >
         | < KW_FALSE: "false" >
         | < KW_FN: "fn" >
         | < KW_FOR: "for" >
         | < KW_IF: "if" >
         | < KW_IMPL: "impl" >
         | < KW_IN: "in" >
         | < KW_LET: "let" >
         | < KW_LOOP: "loop" >
         | < KW_MATCH: "match" >
         | < KW_MOD: "mod" >
         | < KW_MOVE: "move" >
         | < KW_MUT: "mut" >
         | < KW_PUB: "pub" >
         | < KW_REF: "ref" >
         | < KW_RETURN: "return" >
         | < KW_SELFVALUE: "self" >
         | < KW_SELFTYPE: "Self" >
         | < KW_STATIC: "static" >
         | < KW_STRUCT: "struct" >
         | < KW_SUPER: "super" >
         | < KW_TRAIT: "trait" >
         | < KW_TRUE: "true" >
         | < KW_TYPE: "type" >
         | < KW_UNSAFE: "unsafe" >
         | < KW_USE: "use" >
         | < KW_WHERE: "where" >
         | < KW_WHILE: "while" >

         | < KW_ASYNC: "async" >
         | < KW_AWAIT: "await" >
         | < KW_DYN: "dyn" >

         |  < KW_ABSTRACT: "abstract" >
         | < KW_BECOME: "become" >
         | < KW_BOX: "box" >
         | < KW_DO: "do" >
         | < KW_FINAL: "final" >
         | < KW_MACRO: "macro" >
         | < KW_OVERRIDE: "override" >
         | < KW_PRIV: "priv" >
         | < KW_TYPEOF: "typeof" >
         | < KW_UNSIZED: "unsized" >
         | < KW_VIRTUAL: "virtual" >
         | < KW_YIELD: "yield" >

         | < KW_TRY: "try" >
}

// strings
TOKEN: {
    < STRING: "\'" (~["\'"])* "\'" | ("\"" (~["\""])* "\"") >
}

// numbers
TOKEN: {
      < DIGIT: ["0"-"9"] >
    | < DIGITS: (<DIGIT>)+ >
    | < INTEGER: ("-" | "+")? <DIGITS> >
    | < REAL: ("-" | "+")? (<DIGIT>)* "." <DIGITS> >
}

// punctuation
TOKEN : {
      < PLUS : "+" >
    | < MINUS : "-" >
    | < STAR : "*" >
    | < SLASH : "/" >
    | < PERCENT : "%" >
    | < CARET : "^" >
    | < NOT : "!" >
    | < AND : "&" >
    | < OR : "|" >
    | < ANDAND : "&&" >
    | < OROR : "||" >
    | < SHL : "<<" >
    | < SHR : ">>" >
    | < PLUSEQ : "+=" >
    | < MINUSEQ : "-=" >
    | < STAREQ : "*=" >
    | < SLASHEQ : "/=" >
    | < PERCENTEQ : "%=" >
    | < CARETEQ : "^=" >
    | < ANDEQ : "&=" >
    | < OREQ : "|=" >
    | < SHLEQ : "<<=" >
    | < SHREQ : ">>=" >
    | < EQ : "=" >
    | < EQEQ : "==" >
    | < NE : "!=" >
    | < GT : ">" >
    | < LT : "<" >
    | < GE : ">=" >
    | < LE : "<=" >
    | < AT : "@" >
    | < UNDERSCORE : "_" >
    | < DOT : "." >
    | < DOTDOT : ".." >
    | < DOTDOTDOT : "..." >
    | < DOTDOTEQ : "..=" >
    | < COMMA : "," >
    | < SEMI : ";" >
    | < COLON : ":" >
    | < PATHSEP : "::" >
    | < RARROW : "->" >
    | < FATARROW : "=>" >
    | < LARROW : "<-" >
    | < POUND : "#" >
    | < DOLLAR : "$" >
    | < QUESTION : "?" >
    | < TILDE : "~" >
}

// delimiters
TOKEN: {
      < LBRACE: "{" >
    | < RBRACE: "}" >
    | < LBRACKET: "[" >
    | < RBRACKET: "]" >
    | < LPAREN: "(" >
    | < RPAREN: ")" >
}

// built in types
TOKEN: {
    < TY_BOOL: "bool" >
  | < TY_CHAR: "char" >
  | < TY_STR: "str" >
  | < TY_U8: "u8" >
  | < TY_U16: "u16" >
  | < TY_U32: "u32" >
  | < TY_U64: "u64" >
  | < TY_U128: "u128" >
  | < TY_USIZE: "usize" >
  | < TY_I8: "i8" >
  | < TY_I16: "i16" >
  | < TY_I32: "i32" >
  | < TY_I64: "i64" >
  | < TY_I128: "i128" >
  | < TY_ISIZE: "isize" >
  | < TY_F32: "f32" >
  | < TY_F64: "f64" >
}

// comments
TOKEN: {
      < LINE_COMMENT: "//" (~["\n", "\r"])* ["\n", "\r"] >
     | < BLOCK_COMMENTS: "/*" (("*")* (~["/"])* | (~["*"])* ("/")*)* "*/" >
}

// identifiers
TOKEN : {
    < IDENTIFIER: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])*  >
}

// errors
TOKEN : {
      < IDENTIFIER_ERROR_START: <AT> (["a"-"z", "A"-"Z", "0"-"9", "_"])*  | <DIGIT> (["a"-"z", "A"-"Z", "0"-"9", "_"])*  | <UNDERSCORE> >
    | < REAL_NUMBER_ERROR_MALFORMED: ("-" | "+")? (<DIGIT>)* "." <DIGITS> "." <DIGITS> >
    | < STRING_ERROR_UNTERMINATED: ("\"" (~["\""])* ) | ("\'" (~["\'"])* ) >
    | < PUNCTUATION_ERROR_INVALID: (("+") ("+")+ | ("-") ("-")+ ) >
}

void start(TreeNode parent): {}
{
    ( statement(parent))*
}

void statement(TreeNode parent):
{
    TreeNode statementNode = new TreeNode("statement");
    parent.addChild(statementNode);
}
{
     import_statement(statementNode)
    | LOOKAHEAD(2) variable_declaration()
    | conditional_statement()
    | LOOKAHEAD(2) function_declaration()
    | LOOKAHEAD(2) assignment_statement()
    | while_statement()
    | for_statement()
    | loop_statement()
    | match_statement()
    | block()
    | LOOKAHEAD(2) function_call_statement()
    | function_return_statement()
    | LOOKAHEAD(2) expression()
}

void variable_declaration(): {}
{
    <KW_LET> (<KW_MUT>)? <IDENTIFIER> (<COLON> type_specifier())? (<EQ> expression())? <SEMI>
}

void expression(): {}
{
    logical_or_expression()
}

void import_statement(TreeNode parent):
{
    TreeNode importNode = new TreeNode("import_statement");
    parent.addChild(importNode);
}
{
    <KW_USE> {  importNode.addChild(new TreeNode("KW_USE")); }
    module_path(importNode)
    (<KW_AS> { importNode.addChild(new TreeNode("KW_AS")); } <IDENTIFIER> { importNode.addChild(new TreeNode("IDENTIFIER")); })?
    <SEMI> { importNode.addChild(new TreeNode("SEMI")); }
}

void module_path(TreeNode parent):
{
    TreeNode modulePathNode = new TreeNode("module_path");
    parent.addChild(modulePathNode);
}
{
    <IDENTIFIER> { modulePathNode.addChild(new TreeNode("IDENTIFIER")); }
     ( <PATHSEP> { modulePathNode.addChild(new TreeNode("PATHSEP")); } <IDENTIFIER> { modulePathNode.addChild(new TreeNode("IDENTIFIER")); } )*
}

void assignment_statement(): {}
{
    <IDENTIFIER> assignment_operators() expression() <SEMI>
}

void assignment_operators(): {}
{
    <EQ> | <PLUSEQ> | <MINUSEQ> | <STAREQ> | <SLASHEQ> | <PERCENTEQ> | <CARETEQ> | <ANDEQ> | <OREQ> | <SHLEQ> | <SHREQ>
}

void logical_or_expression(): {}
{
     logical_and_expression() ( <OROR> logical_and_expression())*
}

void logical_and_expression(): {}
{
    equality_expression() ( <ANDAND> equality_expression() )*
}

void equality_expression(): {}
{
    relational_expression() (( <EQEQ> | <NE> ) relational_expression())*
}

void relational_expression(): {}
{
    additive_expression() ( ( <LT> | <GT> | <LE> | <GE> ) additive_expression() )*
}

void additive_expression(): {}
{
    multiplicative_expression() ( LOOKAHEAD(2) ( <PLUS> | <MINUS> ) multiplicative_expression() )*
}

void multiplicative_expression(): {}
{
    unary_expression() ( ( <STAR> | <SLASH> | <PERCENT> ) unary_expression() )*
}

void unary_expression(): {}
{
    ( <PLUS> | <MINUS> | <NOT> )? primary_expression()
}

void primary_expression(): {}
{
    <INTEGER>
    | <REAL>
    | <DIGITS>
    | <DIGIT>
    | <STRING>
    | <IDENTIFIER>
    | <KW_TRUE>
    | <KW_FALSE>
    | "(" expression() ")"
}

void conditional_statement(): {}
{
     <KW_IF> conditional_expression() block() (<KW_ELSE> block())?
}

void conditional_expression():{}
{
    LOOKAHEAD(2) <LPAREN> expression() <RPAREN> | expression()
}

void block(): {
         TreeNode temporaryNode = new TreeNode("TEMPORARY");
     }
{
    <LBRACE> ( statement(temporaryNode))* <RBRACE>
}

void while_statement(): {}
{
     <KW_WHILE> <LPAREN> expression() <RPAREN> block()
}

void for_statement(): {}
{
     <KW_FOR> <LPAREN> (variable_declaration() | assignment_statement()) <SEMI> expression() <SEMI> expression() <RPAREN> block()
}

void loop_statement(): {}
{
     <KW_LOOP> block()
}

void function_return_statement(): {}
{
    <KW_RETURN> (expression())? <SEMI>
}

void function_declaration(): {}
{
     <KW_FN> <IDENTIFIER> <LPAREN> function_params() <RPAREN> (<RARROW> type_specifier())? block()
}

void function_params(): {}
{
    (parameter() ( <COMMA> parameter() )* )?
}

void parameter(): {}
{
    <IDENTIFIER> <COLON> type_specifier()
}

void function_call_statement(): {}
{
    <IDENTIFIER> (<NOT>)? <LPAREN> function_arguments() <RPAREN> <SEMI>
}

void function_arguments(): {}
{
    (expression() (<COMMA> expression())*)?
}

void match_statement(): {}
{
     <KW_MATCH> match_expression() <LBRACE> match_block() <RBRACE>
}

void match_block(): {}
{
    (match_arm() (LOOKAHEAD(2) "," match_arm())* (",")?)?
}

void match_arm(): {}
{
    pattern() <RARROW> (expression() | block())
}

void pattern(): {}
{
    <INTEGER> | <STRING> | <IDENTIFIER> | "_"
}

void match_expression(): {}
{
    LOOKAHEAD(2) <LPAREN> expression() <RPAREN> | expression()
}

void type_specifier(): {}
{
    <TY_BOOL>
    | <TY_CHAR>
    | <TY_STR>
    | <TY_U8>
    | <TY_U16>
    | <TY_U32>
    | <TY_U64>
    | <TY_U128>
    | <TY_USIZE>
    | <TY_I8>
    | <TY_I16>
    | <TY_I32>
    | <TY_I64>
    | <TY_I128>
    | <TY_ISIZE>
    | <TY_F32>
    | <TY_F64>
    | <IDENTIFIER>
}
